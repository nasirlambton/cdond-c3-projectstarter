version: 2.1

commands:
  install_awscli:
    description: Install AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
     description: Install Node.js 16
     steps:
      - run:
          name: Install Node.js 16
          command: |
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt install -y nodejs


  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/GihzLn9tKaS8UmwtTTnRhb/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend-test
          command: |
            # Your code here
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
     
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend-test
          command: |
            # Your code here
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scanfrontend-test]
      - run:
          name: Scan-Frontend
          command: |
            # Your code here
            cd frontend
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-test
  scan-backend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scanbackend-test]
      - run:
          name: Scan-Backend
          command: |
            # Your code here
            cd backend
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: scanbackend-test

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
           aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
            #  export BACKEND_IP=$(aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            # --output text 
            # )
            # echo ${BACKEND_IP}

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "48:96:7a:5f:a8:a3:79:4d:c7:03:71:a4:37:ad:51:95"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update --no-cache tar
            apk add --update --no-cache gzip
            apk add --update --no-cache ansible
            apk add --update --no-cache aws-cli
            apk add --update --no-cache curl
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Configure server
          command: |
            # Your code here
            echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [ backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             curl --insecure https://kvdb.io/4NAo1FjcVqXjoCvgmis311/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: 
            - "48:96:7a:5f:a8:a3:79:4d:c7:03:71:a4:37:ad:51:95"
      - attach_workspace:
          at: ~/

      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text 
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install -g npm@latest
            rm -rf node_modules
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

     
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "48:96:7a:5f:a8:a3:79:4d:c7:03:71:a4:37:ad:51:95"
      - attach_workspace:
          at: ~/
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend

            npm i
            npm run build
            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml


      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflow_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflow_ID > ~/OldWorkflow_ID.txt
            cat ~/OldWorkflow_ID.txt
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
            echo "OldWorkflow_ID: ${OldWorkflow_ID}"
            echo "Current Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-prometheus:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '5d:67:e3:85:c2:b2:46:0f:dd:7f:6a:4b:06:66:8f:d0'
      - run:
          name: Install dependencies
          command: |
            apk add --update aws-cli
            apk add --update tar
            apk add --update gzip
            apk add --update ansible
            apk add --update nodejs
            apk add --update npm
            apk add --update curl
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Fetching OldStack Workflow ID
          command: |
            # your code here
            echo "I temporarily disable these command below, it will be uncommented once pass the review phase"
            # export OldWorkflowID=$(aws cloudformation \
            # list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            # --no-paginate --output text)
            # echo OldWorkflowID: "${OldWorkflowID}"
            # echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            # --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            # echo Stack names: "${STACKS[@]}"
            # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            # then
              # your code here
            #   echo "----------------------Delete Confirmed-------------------------------------"
            #   aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            # else
            #   echo "----------------------Cannot Cleanup---------------------------------------"
            # fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]